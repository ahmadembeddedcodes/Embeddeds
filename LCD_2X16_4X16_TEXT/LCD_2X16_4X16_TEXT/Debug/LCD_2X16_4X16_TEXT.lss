
LCD_2X16_4X16_TEXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b7  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045f  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000129  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 01 	call	0x288	; 0x288 <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Send_Command>:

/* send a command to lcd*/ 
void LCD_Send_Command(u8 CMD){
	//RS,R/W must be 0 to enable commands
	
	*LCD_CONTROL_PORT &=~(1<<R_W_PIN);
  92:	aa 98       	cbi	0x15, 2	; 21
	*LCD_CONTROL_PORT &=~(1<<RS_PIN);
  94:	a8 98       	cbi	0x15, 0	; 21
	}
	
	else
	{
	 /* SEND FIRST NIBBLE - HIGH NIBBLE */ 	
		*LCD_DATA_PORT = (CMD&0xf0) ; // High Nibble 
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	92 bb       	out	0x12, r25	; 18
		//HIGH-TO-LOW_ SIGNAL
		*LCD_CONTROL_PORT |=(1<<ENABLE_PIN);
  9c:	a9 9a       	sbi	0x15, 1	; 21
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
		delay_ms(1);
  a2:	00 00       	nop
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	20 39       	cpi	r18, 0x90	; 144
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	39 07       	cpc	r19, r25
  ae:	c9 f7       	brne	.-14     	; 0xa2 <LCD_Send_Command+0x10>
  b0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
  b4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
  b8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
  bc:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
		*LCD_CONTROL_PORT &=~(1<<ENABLE_PIN);
  c0:	a9 98       	cbi	0x15, 1	; 21
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
		delay_ms(100);
  c6:	00 00       	nop
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	20 34       	cpi	r18, 0x40	; 64
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	39 07       	cpc	r19, r25
  d2:	c9 f7       	brne	.-14     	; 0xc6 <LCD_Send_Command+0x34>
  d4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
  d8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
  dc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
  e0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
		
	/*SEND SECOND NIBBLE - LOW NIBBLE */	
		*LCD_DATA_PORT = (CMD<<4) ; // LOW Nibble 
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	82 bb       	out	0x12, r24	; 18
		//HIGH-TO-LOW_ SIGNAL
		*LCD_CONTROL_PORT |=(1<<ENABLE_PIN);
  ea:	a9 9a       	sbi	0x15, 1	; 21
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
		delay_ms(1);
  f0:	00 00       	nop
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	80 39       	cpi	r24, 0x90	; 144
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	92 07       	cpc	r25, r18
  fa:	d1 f7       	brne	.-12     	; 0xf0 <LCD_Send_Command+0x5e>
  fc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 100:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 104:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 108:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
		*LCD_CONTROL_PORT &=~(1<<ENABLE_PIN);
 10c:	a9 98       	cbi	0x15, 1	; 21
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
		delay_ms(1);
 112:	00 00       	nop
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	80 39       	cpi	r24, 0x90	; 144
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	92 07       	cpc	r25, r18
 11c:	d1 f7       	brne	.-12     	; 0x112 <LCD_Send_Command+0x80>
 11e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 122:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 126:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 12a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
 12e:	08 95       	ret

00000130 <LCD_Init>:
	}

}

/*initialize the lcd*/
void LCD_Init(){
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
	
  delay_ms(15);  
 134:	00 00       	nop
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	80 37       	cpi	r24, 0x70	; 112
 13a:	27 e1       	ldi	r18, 0x17	; 23
 13c:	92 07       	cpc	r25, r18
 13e:	d1 f7       	brne	.-12     	; 0x134 <LCD_Init+0x4>
 140:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 144:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 148:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 14c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
  }
  
  else   // mode must be 4 bit mode
  {
	 //  LCD_DATA_PORT_DIRECTION |= (1<<PIN);
	   *LCD_DATA_PORT_DIRECTION |=(1<<D4);
 150:	8c 9a       	sbi	0x11, 4	; 17
	   *LCD_DATA_PORT_DIRECTION |=(1<<D5);
 152:	8d 9a       	sbi	0x11, 5	; 17
	   *LCD_DATA_PORT_DIRECTION |=(1<<D6);
 154:	8e 9a       	sbi	0x11, 6	; 17
	   *LCD_DATA_PORT_DIRECTION |=(1<<D7);
 156:	8f 9a       	sbi	0x11, 7	; 17
	   
	   //set control pins as output
	   *LCD_CONTROL_PORT_DIR |=(1<<RS_PIN);
 158:	a0 9a       	sbi	0x14, 0	; 20
	   *LCD_CONTROL_PORT_DIR |=(1<<ENABLE_PIN);
 15a:	a1 9a       	sbi	0x14, 1	; 20
	   *LCD_CONTROL_PORT_DIR |=(1<<R_W_PIN);	  
 15c:	a2 9a       	sbi	0x14, 2	; 20
		LCD_Send_Command(DISPLAY_ON_CURSOR_BLINKING);
		LCD_Send_Command(CLEAR_SCREEN);
	}
	else{	
 		
		LCD_Send_Command(0x33); 
 15e:	83 e3       	ldi	r24, 0x33	; 51
 160:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
		LCD_Send_Command(0x32);  
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
		LCD_Send_Command(MODE_4);   
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
		LCD_Send_Command(DISPLAY_ON_CURSOR_BLINKING);   
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
		LCD_Send_Command(CLEAR_SCREEN);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x50>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0x56>
 186:	00 00       	nop
		_delay_ms(2);  
		LCD_Send_Command(RETURN_HOME);    
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
		LCD_Send_Command(INCREMENT_CURSOR);  
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
 194:	08 95       	ret

00000196 <LCD_Print_Char>:
}

/*send one charachter to lcd */ 
void LCD_Print_Char(u8 ch){
  //you must make RS as high voltage and R/W is low volt
  *LCD_CONTROL_PORT |=(1<<RS_PIN);
 196:	a8 9a       	sbi	0x15, 0	; 21
  *LCD_CONTROL_PORT &=~(1<<R_W_PIN);
 198:	aa 98       	cbi	0x15, 2	; 21
	  *LCD_CONTROL_PORT &=~(1<<ENABLE_PIN);
	  delay_ms(2);  
	  
  }
  else {
	  *LCD_DATA_PORT = (ch & 0xf0); 
 19a:	98 2f       	mov	r25, r24
 19c:	90 7f       	andi	r25, 0xF0	; 240
 19e:	92 bb       	out	0x12, r25	; 18
	  	  //HIGH-TO-LOW_ SIGNAL
	  	  *LCD_CONTROL_PORT |=(1<<ENABLE_PIN);
 1a0:	a9 9a       	sbi	0x15, 1	; 21
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
	  	  delay_ms(1);
 1a6:	00 00       	nop
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	20 39       	cpi	r18, 0x90	; 144
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	39 07       	cpc	r19, r25
 1b2:	c9 f7       	brne	.-14     	; 0x1a6 <LCD_Print_Char+0x10>
 1b4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 1b8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 1bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 1c0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
	  	  *LCD_CONTROL_PORT &=~(1<<ENABLE_PIN);
 1c4:	a9 98       	cbi	0x15, 1	; 21
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
	  	  delay_ms(1);
 1ca:	00 00       	nop
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	20 39       	cpi	r18, 0x90	; 144
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	39 07       	cpc	r19, r25
 1d6:	c9 f7       	brne	.-14     	; 0x1ca <LCD_Print_Char+0x34>
 1d8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 1dc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 1e0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 1e4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
		
	*LCD_DATA_PORT = (ch <<4);
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	82 bb       	out	0x12, r24	; 18
	//HIGH-TO-LOW_ SIGNAL
	*LCD_CONTROL_PORT |=(1<<ENABLE_PIN);
 1ee:	a9 9a       	sbi	0x15, 1	; 21
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(1);
 1f4:	00 00       	nop
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	80 39       	cpi	r24, 0x90	; 144
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	92 07       	cpc	r25, r18
 1fe:	d1 f7       	brne	.-12     	; 0x1f4 <LCD_Print_Char+0x5e>
 200:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 204:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 208:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 20c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
	*LCD_CONTROL_PORT &=~(1<<ENABLE_PIN);
 210:	a9 98       	cbi	0x15, 1	; 21
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(1);		
 216:	00 00       	nop
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	80 39       	cpi	r24, 0x90	; 144
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	92 07       	cpc	r25, r18
 220:	d1 f7       	brne	.-12     	; 0x216 <LCD_Print_Char+0x80>
 222:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 226:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 22a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 22e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
 232:	08 95       	ret

00000234 <LCD_Print_str>:
  }
 
}

/*send a srting */
void LCD_Print_str(char * str){
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	fc 01       	movw	r30, r24
	u8 counter=0; 
	
	while(str[counter] !='\0')
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	59 f0       	breq	.+22     	; 0x258 <LCD_Print_str+0x24>
 242:	8f 01       	movw	r16, r30
 244:	c0 e0       	ldi	r28, 0x00	; 0
	     {
			  LCD_Print_Char(str[counter]);
 246:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_Print_Char>
			  counter++;
 24a:	cf 5f       	subi	r28, 0xFF	; 255

/*send a srting */
void LCD_Print_str(char * str){
	u8 counter=0; 
	
	while(str[counter] !='\0')
 24c:	f8 01       	movw	r30, r16
 24e:	ec 0f       	add	r30, r28
 250:	f1 1d       	adc	r31, r1
 252:	80 81       	ld	r24, Z
 254:	81 11       	cpse	r24, r1
 256:	f7 cf       	rjmp	.-18     	; 0x246 <LCD_Print_str+0x12>
	     {
			  LCD_Print_Char(str[counter]);
			  counter++;
		 }
}
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <LCD_Clear>:

void LCD_Clear(void){
	
	LCD_Send_Command(CLEAR_SCREEN);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
	 //_delay_ms(2);
	 delay_ms(2); //my delay function
 26a:	00 00       	nop
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	80 32       	cpi	r24, 0x20	; 32
 270:	23 e0       	ldi	r18, 0x03	; 3
 272:	92 07       	cpc	r25, r18
 274:	d1 f7       	brne	.-12     	; 0x26a <LCD_Clear+0xa>
 276:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 27a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 27e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 282:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
 286:	08 95       	ret

00000288 <main>:
 288:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Init>
 28c:	80 e6       	ldi	r24, 0x60	; 96
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_Print_str>
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	9d e0       	ldi	r25, 0x0D	; 13
 298:	a3 e0       	ldi	r26, 0x03	; 3
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	00 00       	nop
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	a1 09       	sbc	r26, r1
 2a2:	b1 09       	sbc	r27, r1
 2a4:	d9 f7       	brne	.-10     	; 0x29c <main+0x14>
 2a6:	0e c0       	rjmp	.+28     	; 0x2c4 <main+0x3c>
 2a8:	00 00       	nop
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	a1 09       	sbc	r26, r1
 2ae:	b1 09       	sbc	r27, r1
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <main+0x20>
 2b2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 2b6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 2ba:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 2be:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
 2c2:	e4 cf       	rjmp	.-56     	; 0x28c <main+0x4>
 2c4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 2c8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 2cc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 2d0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
 2d4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Clear>
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	9d e0       	ldi	r25, 0x0D	; 13
 2dc:	a3 e0       	ldi	r26, 0x03	; 3
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e3 cf       	rjmp	.-58     	; 0x2a8 <main+0x20>

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
