
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000174  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d3  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060a  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006c  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_INIT>:
void ADC_INIT(){               


  	
	  //enable adc  
	 ADCSRA_REG |=(1<<ADEN_BIT); 
  7c:	37 9a       	sbi	0x06, 7	; 6
/************************************************************************/	
		//SET voltage reference 
	ADMUX_REG |=    ((ADC_conf.Vref << 6) & 0xC0 );  
  7e:	27 b1       	in	r18, 0x07	; 7
  80:	e0 e6       	ldi	r30, 0x60	; 96
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	30 e4       	ldi	r19, 0x40	; 64
  88:	93 9f       	mul	r25, r19
  8a:	c0 01       	movw	r24, r0
  8c:	11 24       	eor	r1, r1
  8e:	82 2b       	or	r24, r18
  90:	87 b9       	out	0x07, r24	; 7
	  
/************************************************************************/	
	//set prescaller-conversion speed    
	ADCSRA_REG |=   (ADC_conf.prescaler & 0x03);
  92:	96 b1       	in	r25, 0x06	; 6
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	83 70       	andi	r24, 0x03	; 3
  98:	89 2b       	or	r24, r25
  9a:	86 b9       	out	0x06, r24	; 6
/************************************************************************/	       
	//set left/RIGHT adjustment   
	ADMUX_REG |=    (ADC_conf.just  << ADLAR_BIT);  
  9c:	27 b1       	in	r18, 0x07	; 7
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	30 e2       	ldi	r19, 0x20	; 32
  a2:	93 9f       	mul	r25, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 2b       	or	r24, r18
  aa:	87 b9       	out	0x07, r24	; 7
	 //ADC_conf.just = 0 or 1
/************************************************************************/	 	   
	//enable/disable interrupt if want 
    ADCSRA_REG |=    (ADC_conf.En_Dis_interrupt_adc << ADIE_BIT );   
  ac:	96 b1       	in	r25, 0x06	; 6
  ae:	83 81       	ldd	r24, Z+3	; 0x03
  b0:	88 0f       	add	r24, r24
  b2:	88 0f       	add	r24, r24
  b4:	88 0f       	add	r24, r24
  b6:	89 2b       	or	r24, r25
  b8:	86 b9       	out	0x06, r24	; 6
  ba:	08 95       	ret

000000bc <ADC_READ>:
u8 ADC_READ(u8 ADC_Chacnnel_number){
 u16 ADC_10_Bit =0 ; 
 u8 ADClow=0;
// u8 ADChigh=0;
 // set desired channel 
  ADMUX_REG |= (ADC_Chacnnel_number & (0x07));
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	87 70       	andi	r24, 0x07	; 7
  c0:	98 2b       	or	r25, r24
  c2:	97 b9       	out	0x07, r25	; 7
  
 //start conversion 
 ADCSRA_REG |=(1<<ADSC_BIT); 
  c4:	36 9a       	sbi	0x06, 6	; 6
 
 //wait a flag - till conversion is complete 
 while (!(ADCSRA_REG &(1<<ADIF_BIT))); 
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <ADC_READ+0xa>
/* you must read low register first, but if you want to read 8 bit, 
 you can read high register only and neglect the low register
 you should to know, when you reading the low byte, 
 the high byte never changed - to keep data safe*/
 
 ADClow= ADCL_REG;
  ca:	24 b1       	in	r18, 0x04	; 4
 //ADChigh= ADCH_REG ; 
 

 ADC_10_Bit |=((8<<ADCH_REG) | ADClow);  // THIS FOR LEFT JUSTIFICATION
  cc:	35 b1       	in	r19, 0x05	; 5
 
  //start new conversion
  ADCSRA_REG |=(1<<ADSC_BIT);
  ce:	36 9a       	sbi	0x06, 6	; 6
  
  
 return ADC_10_Bit ; 
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <ADC_READ+0x1e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	3a 95       	dec	r19
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <ADC_READ+0x1a>

  de:	82 2b       	or	r24, r18
  e0:	08 95       	ret

000000e2 <main>:
	
	
	
	
	//set the adc pin as input - mtnsaaash ! 
DDRA = 0x00; 
  e2:	1a ba       	out	0x1a, r1	; 26

DDRC =0xff; 
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
DDRD =0xff;
  e8:	81 bb       	out	0x11, r24	; 17
PORTC=PORTD=0X00; 
  ea:	12 ba       	out	0x12, r1	; 18
  ec:	15 ba       	out	0x15, r1	; 21

ADC_INIT();
  ee:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_INIT>
      
    while (1) 
    {
		PORTC= ADC_READ(5); 
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_READ>
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <main+0x10>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
