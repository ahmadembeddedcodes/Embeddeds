
RTC_DS1307 IC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb2  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000719  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053d  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00001c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000531  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004aa  00000000  00000000  0000232d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_MASTER_INIT>:
   
    if( I2C_CHECK_STATUS_REG(Repeated_START_condition_transmitted) )	
	   return NO_ERROR;
	else
	   return ERROR_HAPPEN;
}
  6c:	08 98       	cbi	0x01, 0	; 1
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	80 b9       	out	0x00, r24	; 0
  72:	86 b7       	in	r24, 0x36	; 54
  74:	84 60       	ori	r24, 0x04	; 4
  76:	86 bf       	out	0x36, r24	; 54
  78:	08 95       	ret

0000007a <I2C_WAIT_FLAG_TO_BE_SET>:
  7a:	06 b6       	in	r0, 0x36	; 54
  7c:	07 fe       	sbrs	r0, 7
  7e:	fd cf       	rjmp	.-6      	; 0x7a <I2C_WAIT_FLAG_TO_BE_SET>
  80:	08 95       	ret

00000082 <I2C_CHECK_STATUS_REG>:
  82:	21 b1       	in	r18, 0x01	; 1
  84:	28 7f       	andi	r18, 0xF8	; 248
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	48 2f       	mov	r20, r24
  8a:	50 e0       	ldi	r21, 0x00	; 0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	24 17       	cp	r18, r20
  90:	35 07       	cpc	r19, r21
  92:	09 f0       	breq	.+2      	; 0x96 <I2C_CHECK_STATUS_REG+0x14>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret

00000098 <I2C_START_CONDITION>:
  98:	84 ea       	ldi	r24, 0xA4	; 164
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <I2C_WAIT_FLAG_TO_BE_SET>
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	0e 94 41 00 	call	0x82	; 0x82 <I2C_CHECK_STATUS_REG>
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	81 11       	cpse	r24, r1
  aa:	01 c0       	rjmp	.+2      	; 0xae <I2C_START_CONDITION+0x16>
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	89 2f       	mov	r24, r25
  b0:	08 95       	ret

000000b2 <I2C_STOP_CONDITION>:
	  return NO_ERROR;    
}

void I2C_STOP_CONDITION(){
	
TWCR_REG = (1<<TWINT_BIT)|(1<<TWEN_BIT)|(1<<TWSTO_BIT); 
  b2:	84 e9       	ldi	r24, 0x94	; 148
  b4:	86 bf       	out	0x36, r24	; 54
  b6:	08 95       	ret

000000b8 <I2C_MASTER_SEND>:


u8 I2C_MASTER_SEND(u8 DATA_OR_ADDRESS){
	
	/*Load DATA into TWDR Register.*/
	TWDR_REG = DATA_OR_ADDRESS;
  b8:	83 b9       	out	0x03, r24	; 3
	
	/* Clear  TWINT bit in TWCR to start transmission  of data*/
	TWCR_REG = (1<<TWINT_BIT) | (1<<TWEN_BIT); //o start sending the byte.
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	86 bf       	out	0x36, r24	; 54
	
	I2C_WAIT_FLAG_TO_BE_SET();
  be:	0e 94 3d 00 	call	0x7a	; 0x7a <I2C_WAIT_FLAG_TO_BE_SET>
	
	if (I2C_CHECK_STATUS_REG(SLA_W_transmitted_Ack_received) == NO_ERROR )
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	0e 94 41 00 	call	0x82	; 0x82 <I2C_CHECK_STATUS_REG>
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <I2C_MASTER_SEND+0x18>
  ce:	90 e0       	ldi	r25, 0x00	; 0
     	return NO_ERROR;
	else
    	return ERROR_HAPPEN;
}
  d0:	89 2f       	mov	r24, r25
  d2:	08 95       	ret

000000d4 <main>:
#include <avr/io.h>
#include "RTC_DS1307.h" 

int main(void)
{
   I2C_MASTER_INIT(); 
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_MASTER_INIT>
   
   RTC_Set_Time(0x10,0x50,0x00); // time: 10:50:00
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	60 e5       	ldi	r22, 0x50	; 80
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	0e 94 77 00 	call	0xee	; 0xee <RTC_Set_Time>
   RTC_Set_Date(0x06,0x06,0x95); // date: 06:06:1995
  e2:	45 e9       	ldi	r20, 0x95	; 149
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 94 00 	call	0x128	; 0x128 <RTC_Set_Date>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x18>

000000ee <RTC_Set_Time>:
   THAT YOU POINTED FROM THE LAST STEP 
5- STOP CONDITION 
*****************************/


void RTC_Set_Time(u8 hour_hex, u8 min_hex, u8 second_hex){
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	c8 2f       	mov	r28, r24
  f6:	d6 2f       	mov	r29, r22
  f8:	14 2f       	mov	r17, r20
	I2C_START_CONDITION();
  fa:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_START_CONDITION>
	I2C_MASTER_SEND(RTC_DS1307_WRITE_ADDRESS);
  fe:	80 ed       	ldi	r24, 0xD0	; 208
 100:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(0x00); //point to second register
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(second_hex);         //set register pointer to location 0x00 - second register
 10a:	81 2f       	mov	r24, r17
 10c:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(min_hex);         // set seconds = 55
 110:	8d 2f       	mov	r24, r29
 112:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(hour_hex);         // set minitues =58 ** note: register pointer increment automaticallyours mode
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_STOP_CONDITION();
 11c:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_STOP_CONDITION>
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <RTC_Set_Date>:

void RTC_Set_Date(u8 day_hex, u8 month_hex, u8 year_hex){
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	18 2f       	mov	r17, r24
 130:	d6 2f       	mov	r29, r22
 132:	c4 2f       	mov	r28, r20
	I2C_START_CONDITION();
 134:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_START_CONDITION>
	I2C_MASTER_SEND(RTC_DS1307_WRITE_ADDRESS);
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(0x04);  //set register pointer to location 0x04
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(day_hex);    // set day to 0x22 = 22
 144:	81 2f       	mov	r24, r17
 146:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(month_hex);  // set month to 0x07 = 7
 14a:	8d 2f       	mov	r24, r29
 14c:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_MASTER_SEND(year_hex);   //set year to 0x19 = 20
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_MASTER_SEND>
	I2C_STOP_CONDITION();
 156:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_STOP_CONDITION>
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
